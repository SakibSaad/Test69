import { BlogPost } from "@/lib/blog";
import { convertTitleToSlug } from "@/lib/utils";
import { fireAdminDB } from "./firebase_admin";

export async function getPaginatedBlogs({
  lastKey = null,
  perpage = 10,
}: {
  lastKey?: string | null;
  perpage?: number;
}) {
  try {
    const blogsSnapshot =
      lastKey === null
        ? await fireAdminDB.ref("blog").orderByKey().limitToLast(perpage).get()
        : await fireAdminDB
            .ref("blog")
            .orderByKey()
            .limitToFirst(perpage + 1)
            .get();

    let blogs: BlogPost[] = [];

    blogsSnapshot.forEach((blog) => {
      let blogData = blog.val() as BlogPost;
      let blogId = blog.key;
      blogs.push({
        id: blogId,
        ...blogData,
      });
    });

    return blogs.reverse();
  } catch (error) {
    console.error("Error getting paginated blogs:", error);
    return null;
  }
}

export async function getBlogBySlug(slug: string): Promise<BlogPost | null> {
  try {
    const slugSnapshot = await fireAdminDB
      .ref(`blog-slug/${slug}`)
      .once("value");

    const autoGeneratedId = slugSnapshot.val();

    if (autoGeneratedId) {
      const blogSnapshot = await fireAdminDB
        .ref(`blog/${autoGeneratedId}`)
        .once("value");

      const blogData = blogSnapshot.val() as BlogPost;

      return blogData;
    } else {
      return null;
    }
  } catch (error) {
    console.error("Error getting blog by slug:", error);
    return null;
  }
}

export async function createBlog({ blog }: { blog: BlogPost }) {
  try {
    let slug = convertTitleToSlug(blog.title);
    blog.slug = slug;

    let blogRef = fireAdminDB.ref("blog").push();
    let autoGeneratedId = blogRef.key;
    await blogRef.set(blog);

    await fireAdminDB.ref(`blog-slug/${blog.slug}`).set(autoGeneratedId);

    return autoGeneratedId;
  } catch (error) {
    return null;
  }
}
